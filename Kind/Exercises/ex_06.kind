// Inte Exercises

// Integers
type Inte { 
  neg(num: Neg)
  nat(num: Nat)
}

// Negative Numbers
type Neg { 
  one
  succ(pred: Neg)
}

// example
// -0 does not exist
// Increments a negative number by one
Neg.inc(n: Neg): Neg
  case n { 
    one : Neg.one
    succ: n.pred
  }

// Converts Neg to Nat
Neg.to_nat(n: Neg): Nat
  case n { 
    one : Nat.succ(Nat.zero)
    succ: Nat.succ(Neg.to_nat(n.pred))
  }
  
// Converts Nat to Neg
Nat.to_neg(n: Nat): Neg
  case n {
    zero: Neg.one
    succ: case n.pred {
      zero: Neg.one
      succ: Neg.succ(Nat.to_neg(n.pred))
    }
  }
// Converts Neg to String
Neg.show(n: Neg): String
  "-" | Nat.show(Neg.to_nat(n))


// Functions for negative numbers to help testing 
// Do not edit those functions

// Converts Int to String
inte_show(n: Inte): String
  case n {
    neg: Neg.show(n.num) 
    nat: Nat.show(n.num) 
  }

// Creates an Inte
Inte.new(is_neg: Bool, val: Nat): Inte
  case is_neg {
    false: Inte.nat(val)
    true : case val {
      zero: Inte.nat(Nat.zero)
      succ: Inte.neg(Nat.to_neg(val))
    }
  }

int(is_pos: Bool, val: Nat): Inte
  Inte.new(Bool.not(is_pos), val)

// Exercises:

// Increments an Inte
// inc(-1) = +0
// inc(-2) = -1
// inc(+2) = +3
inc(a: Inte): Inte
  case a {
    nat: Inte.nat(Nat.succ(a.num))
    neg: case a.num {
      one : Inte.nat(Nat.zero)
      succ: Inte.neg(a.num.pred)
    }
  }

// Decrements an Inte
// dec(-1) = -2
// dec(+2) = +1
// dec(+0) = -1
dec(a: Inte): Inte
  case a {
    nat: case a.num {
      zero: Inte.neg(Neg.one)
      succ: Inte.nat(a.num.pred)
    }
    neg: Inte.neg(Neg.succ(a.num))
  }

// Doubles an Inte
// dbl(-4) = -8
// dbl(-1) = -2
// dbl(+2) = +4
dbl(a: Inte): Inte 
  case a {
    nat: Inte.new(false, Nat.double(a.num))
    neg: Inte.new(true , Nat.double(Neg.to_nat(a.num)))
  }

// Adds two Integers
// -4 + -2 = -6
// -4 + +2 = -2
add(a: Inte, b: Inte): Inte
  case a b {
    nat nat:
      case a.num {
        zero: b
        succ:
          let dec_a = Inte.nat(a.num.pred)
          let inc_b = Inte.nat(Nat.succ(b.num))
          add(dec_a, inc_b)
      }
    neg neg:
      case a.num {
        one : Inte.neg(Neg.succ(b.num))
        succ:
          let inc_a = Inte.neg(a.num.pred)
          let dec_b = Inte.neg(Neg.succ(b.num))
          add(inc_a, dec_b)
      }
    nat neg:
      case a.num b.num {
        zero one : b
        zero succ: b
        succ one : Inte.nat(a.num.pred)
        succ succ:
          let dec_a = Inte.nat(a.num.pred)
          let inc_b = Inte.neg(b.num.pred)
          add(dec_a, inc_b)
      }
    neg nat:
      case a.num b.num {
        one  zero: a
        succ zero: a
        one  succ: Inte.nat(b.num.pred)
        succ succ:
          let inc_a = Inte.neg(a.num.pred)
          let dec_b = Inte.nat(b.num.pred)
          add(inc_a, dec_b)
      }
  }

add2(a: Inte, b: Inte): Inte
  case a b {
    nat nat:
      case a.num {
        zero: b
        succ: add2(dec(a), inc(b))
      }
    neg neg:
      case a.num {
        one : dec(b)
        succ: add2(inc(a), dec(b))
      }
    nat neg:
      case a.num b.num {
        zero one : b
        zero succ: b
        succ one : dec(a)
        succ succ: add2(dec(a), inc(b))
      }
    neg nat:
      case a.num b.num {
        one  zero: a
        succ zero: a
        one  succ: dec(b)
        succ succ: add2(inc(a), dec(b))
      }
  }

add3(a: Inte, b: Inte): Inte
  case a b {
    nat nat: Inte.new(false, a.num + b.num )
    neg neg: Inte.new(true, Neg.to_nat(a.num) + Neg.to_nat(b.num))
    nat neg: 
      if gte(abs(a), abs(b)) then
        Inte.new(false, a.num - Neg.to_nat(b.num))
      else
        Inte.new(true, Neg.to_nat(b.num) - a.num )
    neg nat: add3(b, a)
  }

// Absolute value
abs(n: Inte): Inte
  case n {
    nat: n
    neg: neg(n)
  }

// Converts negatives and positives
neg(n: Inte): Inte
  case n {
    nat: case n.num {
      zero: Inte.nat(Nat.zero)
      succ: Inte.neg(Nat.to_neg(n.num))
    }
    neg: Inte.nat(Neg.to_nat(n.num))
  }

// Multiplies two numbers
// -2 * +3 = -6
// -4 * -5 = +20
mul(a: Inte, b: Inte): Inte
  case a b {
    nat nat: Inte.new(false,            a.num  *            b.num )
    neg neg: Inte.new(false, Neg.to_nat(a.num) * Neg.to_nat(b.num))
    nat neg: Inte.new(true ,            a.num  * Neg.to_nat(b.num))
    neg nat: Inte.new(true , Neg.to_nat(a.num) *            b.num )
  }

// Subtracts two Interger numbers
// -6 - +6 = +0
// -4 - -6 = +2
sub(a: Inte, b: Inte): Inte
  add(a, neg(b))

// Equal
// Given 2 numbers, it returns true if the 2 are the same and false if they are different.
eql(a: Inte, b: Inte): Bool
  case a b {
    nat nat: a.num =? b.num
    neg neg: Neg.to_nat(a.num) =? Neg.to_nat(b.num)
    nat neg: false
    neg nat: false
  }

// Greater than
// -2 > -5 = True
// -5 > -1 = False
// -2 > +0 = False
// +0 > -2 = True
// if A > B == True else false
gtn(a: Inte, b: Inte): Bool
  case a b {
    nat nat: Nat.gtn(a.num, b.num)
    neg neg: Nat.ltn(Neg.to_nat(a.num), Neg.to_nat(b.num))
    nat neg: true
    neg nat: false
  }

gte(a: Inte, b: Inte): Bool
  gtn(inc(a), b)

// Lower than
// -1 < +0 = True
// +0 < -1 = False
// if A > B == False else true
ltn(a: Inte, b: Inte): Bool
  Bool.not(gte(a, b))

// Minimum
// min(-1, +0) = -1
// min(-1, -3) = -3
// if A < B then A else B
min(a: Inte, b: Inte): Inte
  if ltn(a, b) then a else b

// Maximum
// max(-1, +0) = +0
// max(-1, -3) = -1
// if A > B then A else B
max(a: Inte, b: Inte): Inte
  if gtn(a, b) then a else b

// Half
// Divides a number by two
// hlf(-4) = -2
// hlf(-1) = +0
// hlf(+6) = +3
hlf(a: Inte): Inte
  case a {
    nat: Inte.new(false, Nat.half(           a.num ))
    neg: Inte.new(true , Nat.half(Neg.to_nat(a.num)))
  }

// Division
// int(true,  2)  / int(true,  2)  = +1
// int(false, 8)  / int(true,  4)  = -2
// int(false, 11) / int(false, 5)  = +2
// int(true,  10) / int(false, 12) = +0
div(a: Inte, b: Inte): Inte 
  case a b {
    nat nat: Inte.new(false,            a.num  /            b.num )
    neg neg: Inte.new(false, Neg.to_nat(a.num) / Neg.to_nat(b.num))
    nat neg: Inte.new(true ,            a.num  / Neg.to_nat(b.num))
    neg nat: Inte.new(true , Neg.to_nat(a.num) /            b.num )
  }


ex_06: IO<Unit>
  IO {
    Tests._06.inc(inc)
    Tests._06.dec(dec)
    Tests._06.dbl(dbl)
    Tests._06.add(add)
    Tests._06.mul(mul)
    Tests._06.sub(sub)
    Tests._06.eql(eql)
    Tests._06.gtn(gtn)
    Tests._06.ltn(ltn)
    Tests._06.min(min)
    Tests._06.max(max)
    Tests._06.hlf(hlf)
    Tests._06.div(div)
  }
