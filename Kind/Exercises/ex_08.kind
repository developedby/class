// Basic exercises involving Lists

type List <A: Type> {
  nil
  cons(head: A, tail: List<A>)
}

// Returns the list without the first element
tail<A: Type>(xs: List<A>): List<A>
  case xs {
    nil : List.nil<A>
    cons: xs.tail
  }

// Returns the length of a list
length<A: Type>(xs: List<A>): Nat
  case xs {
    nil : 0
    cons: Nat.succ(length<A>(xs.tail))
  }

// Concatenates two lists
concat<A: Type>(xs: List<A>, ys: List<A>): List<A>
  case xs {
    nil : ys
    cons: List.cons<A>(xs.head, concat<A>(xs.tail, ys))
  }

// Applies a function to all elements of a list
map<A: Type, B: Type>(fn: A -> B, xs: List<A>): List<B>
  case xs {
    nil : List.nil<B>
    cons: List.cons<B>(fn(xs.head), map<A, B>(fn, xs.tail))

reverse<A: Type>(as: List<A>): List<A>
  reverse.go<A>([], as)

reverse.go<A: Type>(new_list: List<A>, old_list: List<A>): List<A>
  case old_list {
    nil : new_list
    cons: reverse.go<A>(List.cons<A>(old_list.head, new_list), old_list.tail)
  }


ex_08: _
  IO {
    IO.print(List.show!(Nat.show, tail!([1,2,3,4,5])))
    IO.print(Nat.show(length!([1,2,3,4,5])))
    IO.print(List.show!(Nat.show, concat!([1,2,3,4,5], [6,7,8,9])))
    IO.print(List.show!(Nat.show, map!!(Nat.mul(2), [1,2,3,4,5])))
    IO.print(List.show!(Nat.show, reverse!([1,2,3,4,5])))
  }