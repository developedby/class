// Advanced exercises involving recursion

type Nat {
  zero
  succ(pred: Nat)
}

// Doubles a number
dbl(a: Nat): Nat // double
  dbl.go(a, Nat.zero)

dbl.go(a: Nat, acc: Nat)
  case a {
    zero: acc
    succ: dbl.go(a.pred, Nat.succ(Nat.succ(acc)))
  }

// Addition
add(a: Nat, b: Nat): Nat
  case a {
    zero: b
    succ: add(a.pred, Nat.succ(b))
  }

// Multiplication
mul(a: Nat, b: Nat): Nat
  mul.go(a, b, Nat.zero)

mul.go(a: Nat, b: Nat, acc: Nat): Nat
  case a {
    zero: acc
    succ: mul.go(a.pred, b, add(acc, b))
  }

// Subtraction
// 4 - 5 = 0
// 5 - 4 = 1
sub(a: Nat, b: Nat): Nat
  case a {
    zero: zero
    succ: case b {
      zero: a
      succ: sub(a.pred, b.pred)
    }
  }

// Factorial
// 4! = 24
fac(a: Nat): Nat 
  fac.go(a, Nat.succ(Nat.zero))

fac.go(a: Nat, acc: Nat): Nat
  case a {
    zero: acc
    succ: fac.go(a.pred, mul(a, acc))
  }

// Division
// 1 / 2 = 0
// x / 0 = 0
// 5 / 2 = 2
div(a: Nat, b: Nat): Nat // division
  div.go(a, b, Nat.zero)

div.go(a: Nat, b: Nat, acc: Nat): Nat
  case a b {
    succ succ:
      if gtn(a, b.pred) then  // Equivalent to >=
        div.go(sub(a, b), b, add(acc, b))
      else
        acc
  } default Nat.zero

// Equal
eql(a: Nat, b: Nat): Bool // Given 2 numbers, it returns true if the 2 are the same and false if they are different.
  case a b {
    zero zero: true
    succ succ: eql(a.pred, b.pred)
  } default false

// Do not use the "not" function to create the functions below

// Greater than
// 2 > 1 = True
// 3 > 3 = False
gtn(a: Nat, b: Nat): Bool // if A > B then true else false
  case a b {
    zero zero: false
    zero succ: false
    succ zero: true
    succ succ: gtn(a.pred, b.pred)
  }

// Lower than
// 1 < 2 = True
// 3 < 3 = False
ltn(a: Nat, b: Nat): Bool // if A >= B then false else true 
  case a b {
    zero zero: false
    zero succ: true
    succ zero: false
    succ succ: ltn(a.pred, b.pred)
  }
