// Play options
type Object {
  rock
  paper
  scissors
}

// Converts a text to an Object. If not possible, returns rock
Object.read(code: String): Object
  switch String.eql(String.to_lower(code)) {
    "rock"    : Object.rock
    "paper"   : Object.paper
    "scissors": Object.paper
  } default     Object.rock

// Converts a number to an Object. If not possible, returns rock
Object.from_nat(n: Nat): Object
  switch Nat.eql(n) {
    0:      Object.rock
    1:      Object.paper
    2:      Object.scissors
  } default Object.rock

// Checks if Object a beats Object b
// Draw = false
Object.wins(a: Object, b: Object): Bool
  case a b {
    rock scissors : true
    paper rock    : true
    scissors paper: true
  } default         false

// If wins, return "Você ganhou" else "Você perdeu"
Object.match_result(win: Bool): String
  case win {
    true : "Você ganhou"
    false: "Você perdeu"
  }

Object.show(obj: Object): String
  case obj {
    rock    : "rock"
    paper   : "paper"
    scissors: "scissors"
  }

Bool.read_yes_no(s: String): Bool
  switch String.eql(String.to_lower(s)) {
    "y"  : true
    "n"  : false
    "yes": true
    "no" : false
  } default false

game_01_rps: IO(Unit)
  IO {
    IO.print("Pick one: ROCK, paper or scissors")
    // Asks for user input and saves it in variable line
    get user_input = IO.get_line
    // Converts the user_input (String) to the Object type
    let user_object = Object.read(user_input)

    // Number = Random -> 0, 1, 2
    get random_num = IO.random(3)
    // Converts random_num (Nat) to the Object type
    let cpu_object = Object.from_nat(random_num)

    let picks_message =
      "You picked " | Object.show(user_object) |
      ", CPU picked " | Object.show(cpu_object)
    IO.print(picks_message)

    // Compares user_object and cpu_object and returns true if user wins
    let user_won = Object.wins(user_object, cpu_object)

    // Final message to be said: "You won" or "You lost"
    let final_message = if user_won then "You won" else "You lost"
    IO.print(final_message)

    // Ask for y/n to go again
    IO.print("Keep playing [y/N]?")
    get user_input = IO.get_line
    let keep_playing = Bool.read_yes_no(user_input)

    // Go again or quit
    if keep_playing then game_01_rps else IO.end!(Unit.new)
  }