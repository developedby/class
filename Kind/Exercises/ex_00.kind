// Basic Exercises involving Bools

type Bool {
  true
  false
}

// Is true
// Returns true if input is true
is_true(a: Bool): Bool
  a

// Is false
// Returns true if input is false
is_false(a: Bool): Bool
  case a {
    false: Bool.true
    true : Bool.false
  }

// Negation
// Returns the opposite of a Bool
neg(b: Bool): Bool 
  is_false(b)

// And
// Returns true if both inputs are true
and(a: Bool, b: Bool): Bool
  case a b {
    true true: Bool.true
  } default    Bool.false

// Or
// Returs true if any input is true
or(a: Bool, b: Bool): Bool
  case a {
    false: b
    true : Bool.true
  }
// Equal
// Returs true if both inputs are identical
eql(a: Bool, b: Bool): Bool
  case a b {
    false false: Bool.true
    false true : Bool.false
    true  false: Bool.false
    true  true : Bool.true
  }

// Xor
// Returns true if both inputs are different
xor(a: Bool, b: Bool): Bool
  neg(eql(a b))

// Nor
// Returns true if both inputs are false
nor(a: Bool, b: Bool): Bool
  neg(or(a b))

// Nand
// Returns false only if both inputs are true
nand(a: Bool, b: Bool): Bool
  neg(and(a b))

// Xnor
// Returns true if both inputs are identical
xnor(a: Bool, b: Bool): Bool
  eql(a b)


ex_00: _
  // is_true : true  false
  // is_false: false true
  // neg     : false true
  // and     : false false false true
  // or      : false true  true  true
  // eql     : true  false false true
  // xor     : false true  true  false
  // nor     : true  false false false
  // nand    : true  true  true  false
  // xnor    : true  false false true
  let print_bools = (l: List<Bool>)
    log(List.show!(Bool.show, l))
    unit

  let print_ex_bool = (ex: Bool -> Bool)
    print_bools([ex(Bool.true), ex(Bool.false)])

  let print_ex_2bool = (ex: Bool -> Bool -> Bool)
    print_bools([
      ex(Bool.false, Bool.false)
      ex(Bool.true , Bool.false)
      ex(Bool.false, Bool.true )
      ex(Bool.true , Bool.true )])

  let a = print_ex_bool(is_true)
  let a = print_ex_bool(is_false)
  let a = print_ex_bool(neg)
  let a = print_ex_2bool(and)
  let a = print_ex_2bool(or)
  let a = print_ex_2bool(eql)
  let a = print_ex_2bool(xor)
  let a = print_ex_2bool(nor)
  let a = print_ex_2bool(nand)
  let a = print_ex_2bool(xnor)
  unit
