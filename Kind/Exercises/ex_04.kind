// Basic exercises involving Lists

type List <A: Type> {
  nil
  cons(head: A, tail: List<A>)
}

// Returns the list without the first element
tail<A: Type>(xs: List<A>): List<A>
  case xs {
    nil : []
    cons: xs.tail
  }

// Returns the length of a list
length<A: Type>(xs: List<A>): Nat
  case xs {
    nil : 0
    cons: Nat.succ(length!(xs.tail))
  }

// Concatenates two lists
concat<A: Type>(xs: List<A>, ys: List<A>): List<A>
  case xs {
    nil : ys
    cons: xs.head & concat!(xs.tail, ys)
  }

// Applies a function to all elements of a list
map<A: Type, B: Type>(fn: A -> B, xs: List<A>): List<B>
  case xs {
    nil : []
    cons: fn(xs.head) & map!!(fn, xs.tail)
  }

// Returns the same list, with the order reversed
reverse<A: Type>(xs: List<A>): List<A>
  reverse.go!([], xs)

reverse.go<A: Type>(new_list: List<A>, old_list: List<A>): List<A>
  case old_list {
    nil : new_list
    cons: reverse.go!(old_list.head & new_list, old_list.tail)
  }
