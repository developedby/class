// Advanced exercises involving Lists

type List <A: Type> {
  nil
  cons(head: A, tail: List<A>)
}

type Maybe <A: Type> {
  none
  some(value: A)
}

// Returns pairs of the elements of the 2 input lists on the same index
// Ex: zip!!([1,2], ["a","b","c"]) == [{1, "a"}, {2 , "b"}]
// Ex: zip!!(["a", "b"], [3, 5])   == [{"a", 3}, {2 , "b"}]
zip<A: Type, B: Type>(xs: List<A>, ys: List<B>): List<Pair<A,B>>
  case xs {
    nil : []
    cons: case ys {
      nil : []
      cons: Pair.new!!(xs.head, ys.head) & zip!!(xs.tail, ys.tail)
    }
  }

// Returns the smallest element of a List
smallest(xs: List<Nat>): Nat
  case xs {
    nil : 0
    cons: smallest.go(xs.tail, xs.head)
  }

smallest.go(xs: List<Nat>, crnt_min: Nat): Nat
  case xs {
    nil : crnt_min
    cons:
      let new_min = if xs.head <? crnt_min then xs.head else crnt_min
      smallest.go(xs.tail, new_min)
  }

// Returns the same list without the smallest element
delete_smallest(xs: List<Nat>): List<Nat>
  let min = smallest(xs)
  delete(xs, min)

delete(xs: List<Nat>, val: Nat): List<Nat>
  case xs {
    nil : []
    cons:
      if   xs.head =? val
      then xs.tail
      else xs.head & delete(xs.tail, val)
  }

// Returns the same list, in ascending order
sort_ascending(xs: List<Nat>): List<Nat>
  sort_ascending.go(xs, [])

sort_ascending.go(old: List<Nat>, new: List<Nat>): List<Nat>
  case old {
    nil : new
    cons: sort_ascending.go(old.tail, insert_ascending(new, old.head))
  }

insert_ascending(xs: List<Nat>, n: Nat): List<Nat>
  case xs {
    nil : [n]
    cons:
      if   n <=? xs.head
      then n & xs
      else xs.head & insert_ascending(xs.tail, n)
  }

// Returns an element at an index from the list
// if there is an element at that index
//   returns Maybe.some!(element)
// else
//   returns Maybe.none!
get<A: Type>(idx: Nat, xs: List<A>): Maybe<A>
  case xs {
    nil : Maybe.none!
    cons: case idx {
      zero: Maybe.some!(xs.head)
      succ: get!(idx.pred, xs.tail)
    }
  }

// Removes all elements that does not match a condition
// List.filter<Nat>(Nat.odd, [1, 2, 3, 4, 5]) = [1, 3, 5]
filter<A: Type>(f: A -> Bool, xs: List<A>): List<A>
  case xs {
    nil : []
    cons:
      if f(xs.head)
      then xs.head & filter!(f, xs.tail)
      else filter!(f, xs.tail)
  }

Exercises.ex_05:_
  let result = sort_ascending([3 7 12 6 89 1 5 9 3])
  List.show!(Nat.show, result)

  //let result = get!(2, [1,2,3,4,5])
  //Maybe.show!(Nat.show, result)

  //let result = filter!(Nat.gtn(5), [3,4,5,6,7])
  //List.show!(Nat.show, result)