// Consider the following definition for natural numbers:
//
// Z:     The number zero
// (S x): The successor of a number x
//
// Ex.: The number 3 would be (S (S (S Z)))
//
// With that definition in mind, do the following exercises:

// PS.: Remember again that, if your function has specific cases,
// you need to write a version of the function for each case:
//
// (Func Z)     -> Will run only for Zero.
// (Func (S n)) -> Will run for every number that is not Zero.
//                 By calling the function in that way, you can use 'n' as variable.
// (Func x)     -> Will run for any number.

// Returns the predecessor of the number
// (Pred x)
(Pred Z) = Z
(Pred (S n)) = n

// Returns the Double of the number
// (Double x)
(Double Z) = Z
(Double (S n)) = (S (S (Double n)))

// Returns the Half of the number and round it down (e.g.:"5/2 = 2") 
// (Half x)
(Half Z) = Z
(Half (S Z)) = Z
(Half (S (S n))) = (S (Half n))

// Returns the Sum of two numbers
// (Add x y)
(Add Z y) = y
(Add (S x) y) = (Add x (S y))

// Returns the Subtraction of two numbers (0 if it would be negative)
// (Sub x y)
(Sub Z y) = Z
(Sub x Z) = x
(Sub (S x) (S y)) = (Sub x y)

// Returns the Multiplication two numbers
// (Mul x y)
(Mul Z y) = Z
(Mul (S x) y) = (Add y (Mul x y))

// Returns the Factorial of the number
// (Fat x)
(Fat Z) = (S Z)
(Fat (S x)) = (Mul (S x) (Fat x))

// For the following 3 exercises, consider the definition of Booleans from the previous file

// Returns if two numbers are equal
// (Equal x y)
(Equal Z Z) = True
(Equal x Z) = False
(Equal Z y) = False
(Equal (S x) (S y)) = (Equal x y)

// Returns if the first arg is greater than the second
(Gtn Z Z) = False
(Gtn Z y) = False
(Gtn x Z) = True
(Gtn (S x) (S y)) = (Gtn x y)

// Returns if the first arg is lesser than the second
(Ltn Z Z) = False
(Ltn Z y) = True
(Ltn x Z) = False
(Ltn (S x) (S y)) = (Ltn x y)


// SPECIAL BOSS: Returns the division between two numbers, rounded down
// PS.: Returns 0 in case of division by 0

// Division rounding up
(DivCeil Z y) = Z
(DivCeil x Z) = Z
(DivCeil x y) = (S (DivCeil (Sub x y) y))

// If expression. expr ? a : b
(If True a b) = a
(If False a b) = b

// Division rounding down
(DivFloor Z y) = Z
(DivFloor x Z) = Z
(DivFloor x y) = (If (Ltn x y) Z (S (DivFloor (Sub x y) y)))

// Division rounding down, another way
(Mod Z y) = Z
(Mod x Z) = x
(Mod x y) = (If (Ltn x y) x (Mod (Sub x y) y))

(DivFloor2 x Z) = Z
(DivFloor2 x y) = (DivFloor2Aux (Sub x (Mod x y)) y)  // switch x for the largest multiple of y that fits
  (DivFloor2Aux Z y) = Z
  (DivFloor2Aux x y) = (S (DivFloor2Aux (Sub x y) y))

// 4! / 5 = 4
(Main) = (DivFloor2 (Fat (S (S (S (S Z))))) (S (S (S (S (S Z))))))