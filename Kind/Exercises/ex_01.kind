// type MaybeBool
// It maybe holds a Boolean inside it
type MaybeBool { 
  none 
  some(value: Bool)
}

// Returns true if Maybe is none
is_none(a: MaybeBool): Bool
  case a {
    none: true
    some: false
  }

// Returns true if Maybe is some
is_some(a: MaybeBool): Bool
  case a {
    none: false
    some: true
  }

// Returns true if both inputs are identical
// eql(MaybeBool.none,             MaybeBool.none            ) -> true
// eql(MaybeBool.some(Bool.false), MaybeBool.none            ) -> false
// eql(MaybeBool.some(Bool.true),  MaybeBool.some(Bool.false)) -> false
// eql(MaybeBool.some(Bool.false), MaybeBool.some(Bool.false)) -> true
eql(a: MaybeBool, b: MaybeBool): Bool
  case a b {
    none none: true
    some some:
      case a.value b.value {
        true  true : true
        false false: true
      } default false
  } default false

// Returns the value inside the MaybeBool.
// If there is no value contained, returns v instead
extract(a: MaybeBool, v: Bool): Bool
  case a {
    none: v
    some: a.value
  }

// Create a MaybeBool from a Boolean
// create(Bool.false) -> MaybeBool(Bool.false)
create(a: Bool): MaybeBool
  MaybeBool.some(a)

// Returns the first input that is a MaybeBool.some
// Returns MaybeBool.none if both are MaybeBool.none
or(a: MaybeBool, b: MaybeBool) : MaybeBool 
  case a {
    some: a
    none: case b {
      some: b
      none: MaybeBool.none
    }
  }


ex_01: _
  IO {
    // true
    IO.print(Bool.show(is_none(MaybeBool.none)))
    // false
    IO.print(Bool.show(is_none(MaybeBool.some(true))))
    // false
    IO.print(Bool.show(is_some(MaybeBool.none)))
    // true
    IO.print(Bool.show(is_some(MaybeBool.some(true))))
    // true
    IO.print(Bool.show(eql(MaybeBool.none, MaybeBool.none)))
    // false
    IO.print(Bool.show(eql(MaybeBool.some(true), MaybeBool.some(false))))
    // true
    IO.print(Bool.show(eql(MaybeBool.some(true), MaybeBool.some(true))))
    // true
    IO.print(Bool.show(extract(create(true), false)))
    // true
    IO.print(Bool.show(extract(MaybeBool.none, true)))
    // false
    IO.print(Bool.show(extract(or(MaybeBool.none, MaybeBool.none), false)))
    // true
    IO.print(Bool.show(extract(or(MaybeBool.some(true), MaybeBool.none), false)))
    // false
    IO.print(Bool.show(extract(or(MaybeBool.none, MaybeBool.some(false)), false)))
    // true
    IO.print(Bool.show(extract(or(MaybeBool.some(true), MaybeBool.some(true)), false)))
  }