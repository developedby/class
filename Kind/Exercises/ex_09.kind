// Advanced exercises involving Lists

type List <A: Type> {
  nil
  cons(head: A, tail: List<A>)
}

type Maybe <A: Type> {
  none
  some(value: A)
}

// Returns pairs of the elements of the 2 input lists on the same index
// Ex: zip!!([1,2], ["a","b","c"]) == [{1, "a"}, {2 , "b"}]
// Ex: zip!!(["a", "b"], [3, 5])   == [{"a", 3}, {2 , "b"}]
zip<A: Type, B: Type>(xs: List<A>, ys: List<B>): List<Pair<A,B>>
  case xs ys {
    cons cons:
      List.cons!(
        Pair.new!!(xs.head, ys.head),
        zip!!(xs.tail, ys.tail)
      )
  } default List.nil!

// Returns the smallest element of a List
smallest(xs: List<Nat>): Maybe<Nat>
  case xs {
    nil : Maybe.none<Nat>
    cons: case xs.tail {
      nil : Maybe.some<Nat>(xs.head)
      cons: case smallest(xs.tail) as min_tail {
        none: Maybe.some<Nat>(xs.head)
        some: Maybe.some<Nat>(Nat.min(xs.head, min_tail.value))
      }
    }
  }

// Returns the same list without the smallest element
delete_smallest(xs: List<Nat>): List<Nat>
  case smallest(xs) as min {
    none: List.nil<Nat>
    some: delete_smallest.go(xs, min.value)
  }

delete_smallest.go(xs: List<Nat>, min: Nat): List<Nat>
  case xs {
    nil : List.nil<Nat>
    cons:
      if xs.head =? min then
        xs.tail
      else
        xs.head & delete_smallest.go(xs.tail, min)
  }

// Returns the same list, in ascending order
sort_ascending(xs: List<Nat>): List<Nat>
  case xs {
    nil : List.nil<Nat>
    cons: case smallest(xs) as min {
      none: List.nil<Nat>
      some:
        let popped_xs = delete_smallest.go(xs, min.value)
        let sorted_tail = sort_ascending(popped_xs)
        List.cons<Nat>(min.value, sorted_tail)
    }
  }

// Returns an element at an index from the list
// if there is an element at that index
//   returns Maybe.some!(element)
// else
//   returns Maybe.none!
get<A: Type>(idx: Nat, xs: List<A>): Maybe<A>
  case xs {
    nil : Maybe.none<A>
    cons: case idx {
      zero: Maybe.some<A>(xs.head)
      succ: get<A>(idx.pred, xs.tail)
    }
  }

// Removes all elements that does not match a condition
// List.filter<Nat>(Nat.odd, [1, 2, 3, 4, 5]) = [1, 3, 5]
filter<A: Type>(f: A -> Bool, xs: List<A>): List<A>
  case xs {
    nil : List.nil<A>
    cons:
      if f(xs.head) then
        xs.head & filter<A>(f, xs.tail)
      else
        filter<A>(f, xs.tail)
  }


ex_09: _
  IO {
    Tests._09.zip(zip)
    Tests._09.smallest(smallest)
    Tests._09.delete_smallest(delete_smallest)
    Tests._09.sort_ascending(sort_ascending)
    Tests._09.get(get)
    Tests._09.filter(filter)
  }