// Piece
type TicTacToe.Piece {
  O
  X
}

// Game state
type TicTacToe {
  new(
    turn: Nat
    board: List<List<Maybe<TicTacToe.Piece>>>
  )
}

// Example of a finished game
// TicTacToe.new(
//   7,
//   [ 
//     [some(TicTacToe.Piece.X), some(TicTacToe.Piece.X), some(TicTacToe.Piece.O)],
//     [none                   , some(TicTacToe.Piece.X), some(TicTacToe.Piece.O)],
//     [none                   , some(TicTacToe.Piece.O), some(TicTacToe.Piece.X)]
//   ]
// )


// The initial board state
// An empty board
TicTacToe.init: TicTacToe
  ?a

// Gets the state of a given position in the board
// x = row
// y = column
TicTacToe.get(x: Nat, y: Nat, game: TicTacToe): Maybe<TicTacToe.Piece>
  ?b

// If possible, converts the user input to a coordinate {x, y}
// A valid inputs is any pair of 2 numbers separated with a space:
// "0 2"
// "4 4"
// Invalid inputs:
// "banana"
// "   "
TicTacToe.read(input: String): Maybe<Pair<Nat, Nat>>
	?c

// Checks if a movement is valid
// A valid movement is any movement inside the 3x3 board if the tile is unnocupied
TicTacToe.is_move_valid(coord: Pair<Nat, Nat>, game: TicTacToe): Bool
	?d

// Who is the next one to play?
TicTacToe.next_piece(game: TicTacToe): TicTacToe.Piece
  ?e


// From an input, adds X or O (decided from TicTacToe.next_piece) at given location and increments the turn
TicTacToe.move(coord: Pair<Nat, Nat>, game: TicTacToe): TicTacToe
  ?f

// Checks if 2 pieces are equal
TicTacToe.Piece.eql(a: Maybe<TicTacToe.Piece>, b: Maybe<TicTacToe.Piece>): Bool
	?g

// Determines a winner if there is one
TicTacToe.winner(game: TicTacToe): Maybe<TicTacToe.Piece>
  ?h

// Converts the piece into a text to be shown
TicTacToe.Piece.show(a: Maybe<TicTacToe.Piece>): String
  ?i

// Shows the board
// Example:
//
//  X | X | O 
// -----------
//  O | O | X 
// -----------
//  X | O | X 
//
TicTacToe.show(game: TicTacToe): String
  ?j


Test: IO<Unit>
  IO {
    // Prints the initial board
    let ttt = TicTacToe.init
    IO.print(TicTacToe.show(ttt))
    TicTacToe.play(ttt)
  }


// Do not edit below this line 
TicTacToe.play(game: TicTacToe): IO<Unit>
  IO {
    IO.print("Where do you wanna move?")
    // Receives user input
    get line = IO.get_line
    
		// Converts input into coordinates
		let coords = TicTacToe.read(line)

		get game = 
			case coords {
				none: IO {
					IO.print("Invalid entry")
					return game
				}	
				some:
					// Checks if a movement is valid
					let is_move_valid = TicTacToe.is_move_valid(coords.value, game)

					if is_move_valid then IO {
						// Returns the game after 
						let new_game = TicTacToe.move(coords.value, game)
						return new_game
					}
					else IO {
						IO.print("You cannot play there!")
						return game
					}
			}

    // Prints the result
    IO.print(TicTacToe.show(game))

    // Checks who is the winner
    let Winner = TicTacToe.winner(game)
    open game

    // If there is no winner, checks if its a draw
    case Winner { 
      none: 
        if Nat.eql(game.turn, 9) then
          IO.print("Draw!")
        else TicTacToe.play(game)
      some: case Winner.value { 
        X: IO.print("X Wins!")
        O: IO.print("O Wins!")
      }
    }
  }